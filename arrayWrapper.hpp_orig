#ifndef arrayWrapper_hpp
#define arrayWrapper_hpp

#include <stddef.h>
#include <cassert>
#include <algorithm>

#include "iterator.hpp"

namespace SOAX {

template<typename T>
class AW_Scalar
{
 private:
  T const& s;

 public:
 AW_Scalar(T const& v) : s(v) {}

  T operator[](size_t) const {
    return s;
  }
  
  size_t size() const {
    return 0;
  };
};

template<typename T>
class AW_Traits {
 public:
  typedef T const& ExprRef;
};

template<typename T>
class AW_Traits<AW_Scalar<T>> {
 public:
  typedef AW_Scalar<T> ExprRef;
};

template<typename OP1, typename OP2>
class AW_Add 
{
 private:
  typename AW_Traits<OP1>::ExprRef op1;
  typename AW_Traits<OP2>::ExprRef op2;
  
 public:
  
  typedef decltype(op1[0] + op2[0]) value_type;
  
 AW_Add(OP1 const& a, OP2 const& b) : op1(a), op2(b) {}
  
  value_type operator[] (size_t idx) const  {
    return op1[idx] + op2[idx];
  }

  size_t size() const {
    assert(op1.size() == 0 || op2.size() == 0 || op1.size() == op2.size());
    return op1.size() != 0 ? op1.size() : op2.size();
  }
};

template<typename OP1, typename OP2>
class AW_Minus
{
 private:
  typename AW_Traits<OP1>::ExprRef op1;
  typename AW_Traits<OP2>::ExprRef op2;
  
 public:

  typedef decltype(op1[0] - op2[0]) value_type;
  
 AW_Minus(OP1 const& a, OP2 const& b) : op1(a), op2(b) {}
  
  value_type operator[] (size_t idx) const  {
    return op1[idx] - op2[idx];
  }

  size_t size() const {
    assert(op1.size() == 0 || op2.size() == 0 || op1.size() == op2.size());
    return op1.size() != 0 ? op1.size() : op2.size();
  }
};

template<typename OP1, typename OP2>
class AW_Mult
{
 private:
  typename AW_Traits<OP1>::ExprRef op1;
  typename AW_Traits<OP2>::ExprRef op2;
  
 public:
  
  typedef decltype(op1[0]*op2[0]) value_type;
  
 AW_Mult(OP1 const& a, OP2 const& b) : op1(a), op2(b) {}
  
  value_type operator[] (size_t idx) const {
    return op1[idx]*op2[idx];
  }

  size_t size() const {
    assert(op1.size() == 0 || op2.size() == 0 || op1.size() == op2.size());
    return op1.size() != 0 ? op1.size() : op2.size();
  }
};

template<typename OP1, typename OP2>
class AW_Div
{
 private:
  typename AW_Traits<OP1>::ExprRef op1;
  typename AW_Traits<OP2>::ExprRef op2;
  
 public:
  
  typedef decltype(op1[0]/op2[0]) value_type;
  
 AW_Div(OP1 const& a, OP2 const& b) : op1(a), op2(b) {}
  
  value_type operator[] (size_t idx) const {
    return op1[idx]/op2[idx];
  }

  size_t size() const {
    assert(op1.size() == 0 || op2.size() == 0 || op1.size() == op2.size());
    return op1.size() != 0 ? op1.size() : op2.size();
  }
};

template<class ArrayType, typename Rep = ArrayType>
  class ArrayWrapper : public Rep
{
 private:

public:
  typedef ArrayWrapper<ArrayType,Rep> AW_Type;

  CIterator<AW_Type> cbegin() const { 
    std::cerr << "ArrayWrapper::CIterator<AW_Type> cbegin() const\n";
    return CIterator<AW_Type>(*this, 0); }

  Iterator<AW_Type> begin() { 
    std::cerr << "ArrayWrapper::Iterator<AW_Type> begin()\n";
    return Iterator<AW_Type>(*this, 0); 
  }

  CIterator<AW_Type> cend() const { 
    std::cerr << "ArrayWrapper::CIterator<AW_Type> cend() const\n";
    return CIterator<AW_Type>(*this, this->size()); 
  }
  
  Iterator<AW_Type> end() { 
    std::cerr << "ArrayWrapper::Iterator<AW_Type> end()\n";
    return Iterator<AW_Type>(*this, this->size()); 

  }

 ArrayWrapper() : Rep() {};
 
 using Rep::Rep;

 ArrayWrapper (Rep const& rb) : Rep(rb) {}

 ArrayWrapper& operator=(ArrayWrapper const& b) {
   assert(this->size() == b.size());

   
   std::cerr << "ArrayWrapper& operator=(ArrayWrapper const& b)\n";
   
   // b.cbegin();
   // b.cend();
   // this->begin();
   
   //std::copy(b.cbegin(), b.cend(), this->begin());
   thrust::copy(b.cbegin(), b.cend(), this->begin());

   // auto it = b.cbegin();
   // it+0;
   // auto ite = b.cend();

// #pragma omp simd
   // for(size_t idx=0; idx<b.size();++idx) {
   //   (*this)[idx] = b[idx];
   // }
   return *this;
 }

 template<typename ArrayType2, typename Rep2>
 ArrayWrapper& operator=(ArrayWrapper<ArrayType2,Rep2> const& b) {
   assert(this->size() == b.size());

   //   std::cerr << "ArrayWrapper& operator=(ArrayWrapper<T2,Rep2> const& b)\n";
   size_t size = b.size();

   //std::copy(b.cbegin(), b.cend(), this->begin());
   //   thrust::copy(b.cbegin(), b.cend(), this->begin());

// #pragma omp simd
//    for(size_t idx=0;idx<size;++idx) {
//      (*this)[idx] = b[idx];
//    }
   return *this;
 }

 template<typename ArrayType2, typename Rep2>
 ArrayWrapper& operator+=(ArrayWrapper<ArrayType2,Rep2> const& b) {
   assert(this->size() == b.size());

   //   std::cerr << "ArrayWrapper& operator=(ArrayWrapper<T2,Rep2> const& b)\n";
   size_t size = b.size();
   //#pragma ivdep
   //#pragma simd

   //std::transform(this->cbegin(),this->cend(),b.cbegin(),this->begin(), std::plus<decltype(b[0])>());
   //thrust::transform(this->cbegin(),this->cend(),b.cbegin(),this->begin(), thrust::plus<decltype(b[0])>());
   //std::vector<float> testv(100);
   // thrust::device_vector<double> testT1(100);
   // thrust::device_vector<double> testT2(100);
   //thrust::transform(testT1.begin(), testT1.end(), testT2.begin(), testT1.begin(), thrust::plus<double>()); // decltype(b[0]) return thrust::device_reference -> bad for thrust::plus
//thrust::transform(this->cbegin(), this->cend(), b.cbegin(), this->begin(), thrust::plus<double>()); // decltype(b[0]) return thrust::device_reference -> bad for thrust::plus
   //thrust::transform(this->cbegin(), this->cend(), b.cbegin(), testv.begin(), thrust::plus<double>()); // decltype(b[0]) return thrust::device_reference -> bad for thrust::plus
  // auto toto = *(this->cbegin());
   
   // for(size_t idx=0;idx<size;++idx) {
   //   (*this)[idx] += b[idx];
   // }
   return *this;
 }

 template<typename ArrayType2, typename Rep2>
 ArrayWrapper& operator-=(ArrayWrapper<ArrayType2,Rep2> const& b) {
   assert(this->size() == b.size());

   //   std::cerr << "ArrayWrapper& operator=(ArrayWrapper<T2,Rep2> const& b)\n";
   size_t size = b.size();
// #pragma simd
//#pragma ivdep

   std::transform(this->cbegin(),this->cend(),b.cbegin(),this->begin(), std::minus<decltype(b[0])>());

// #pragma simd
//    for(size_t idx=0;idx<size;++idx) {
//      (*this)[idx] -= b[idx];
//    }
   return *this;
 }

 Rep const& rep() const {
   return *this;
 }

 Rep& rep() {
   return *this;
 }
};

template<class ArrayType1, class ArrayType2, int sameType1, int sameType2>
class ArrayTypeDeductionHelper {};

template<class ArrayType1, class ArrayType2>
class ArrayTypeDeductionHelper<ArrayType1,ArrayType2,1,0> {
 public:
  typedef ArrayType1 ArrayType;
};

template<class ArrayType1, class ArrayType2>
class ArrayTypeDeductionHelper<ArrayType1,ArrayType2,0,1> {
 public:
  typedef ArrayType2 ArrayType;
};

template<class ArrayType1, class ArrayType2>
class ArrayTypeDeductionHelper<ArrayType1,ArrayType2,1,1> {
 public:
  typedef ArrayType1 ArrayType;
};

template<class ArrayType1, class ArrayType2>
class ArrayTypeDeduction {
 public:
  typedef typename ArrayType1::value_type T1;
  typedef typename ArrayType2::value_type T2;

  typedef decltype(T1()*T2()) DeclType;

  typedef typename ArrayTypeDeductionHelper<ArrayType1,ArrayType2,
    std::is_same<typename ArrayType1::value_type,DeclType>::value,
    std::is_same<typename ArrayType2::value_type,DeclType>::value>::ArrayType ArrayType;
};

template<typename ArrayType1, typename ArrayType2, typename R1, typename R2>
  ArrayWrapper<typename ArrayTypeDeduction<ArrayType1,ArrayType2>::ArrayType,AW_Add<R1,R2>> operator+(ArrayWrapper<ArrayType1,R1> const& a, ArrayWrapper<ArrayType2,R2> const& b) {
  return ArrayWrapper<typename ArrayTypeDeduction<ArrayType1,ArrayType2>::ArrayType,
    AW_Add<R1,R2>>(AW_Add<R1,R2>(a.rep(),b.rep()));
}

template<typename ArrayType, typename T, typename R>
  ArrayWrapper<ArrayType,AW_Add<AW_Scalar<T>,R>> operator+(ArrayWrapper<ArrayType,R> const& a, T const& s) {
  return ArrayWrapper<ArrayType,AW_Add<AW_Scalar<T>,R>>(AW_Add<AW_Scalar<T>,R>(AW_Scalar<T>(s),a.rep()));
}

template<typename ArrayType, typename T, typename R>
  ArrayWrapper<ArrayType,AW_Minus<R,AW_Scalar<T>>> operator-(ArrayWrapper<ArrayType,R> const& a, T const& s) {
  return ArrayWrapper<ArrayType,AW_Minus<R,AW_Scalar<T>>>(AW_Minus<R,AW_Scalar<T>>(a.rep(),AW_Scalar<T>(s)));
}

template<typename ArrayType1, typename ArrayType2, typename R1, typename R2>
  ArrayWrapper<typename ArrayTypeDeduction<ArrayType1,ArrayType2>::ArrayType,AW_Minus<R1,R2>> operator-(ArrayWrapper<ArrayType1,R1> const& a, ArrayWrapper<ArrayType2,R2> const& b) {
  return ArrayWrapper<typename ArrayTypeDeduction<ArrayType1,ArrayType2>::ArrayType,
    AW_Minus<R1,R2>>(AW_Minus<R1,R2>(a.rep(),b.rep()));
}

template<typename ArrayType, typename T2, typename R2>
  ArrayWrapper<ArrayType,AW_Mult<AW_Scalar<T2>,R2>> operator*(T2 const& s, ArrayWrapper<ArrayType,R2> const& b) {
  return ArrayWrapper<ArrayType,AW_Mult<AW_Scalar<T2>,R2>>(AW_Mult<AW_Scalar<T2>,R2>(AW_Scalar<T2>(s),b.rep()));
}

template<typename ArrayType, typename T2, typename R2>
  ArrayWrapper<ArrayType,AW_Mult<AW_Scalar<T2>,R2>> operator*(ArrayWrapper<ArrayType,R2> const& b, T2 const& s) {
  return ArrayWrapper<ArrayType,AW_Mult<AW_Scalar<T2>,R2>>(AW_Mult<AW_Scalar<T2>,R2>(AW_Scalar<T2>(s),b.rep()));
}

template<typename ArrayType, typename T2, typename R2>
  ArrayWrapper<ArrayType,AW_Div<R2,AW_Scalar<T2>>> operator/(ArrayWrapper<ArrayType,R2> const& b, T2 const& s) {
  return ArrayWrapper<ArrayType,AW_Div<R2,AW_Scalar<T2>>>(AW_Div<R2,AW_Scalar<T2>>(b.rep(),AW_Scalar<T2>(s)));
}

} // namespace SOAX
#endif
